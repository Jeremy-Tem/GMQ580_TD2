# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CumulativeBufferAnalysis
                                 A QGIS plugin
 Ce plugin génère une zone tampon à plusieurs distances spécifiées par l'utilisateur selon un attribut de la couche
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-21
        copyright            : (C) 2025 by Jeremy Tem & Liam Messier
        email                : jeremy.tem@usherbrooke.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jeremy Tem & Liam Messier'
__date__ = '2025-03-21'
__copyright__ = '(C) 2025 by Jeremy Tem & Liam Messier'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import (QCoreApplication,QVariant)
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterString,
                       QgsProcessingException,
                       QgsFeature,
                       QgsWkbTypes,
                       QgsFields,
                       QgsField
                       )


class CumulativeBufferAnalysisAlgorithm(QgsProcessingAlgorithm):
    """
    Cette classe implémente un algorithme QGIS qui génère des tampons cumulés autour des 
    points d'une couche en fonction d'un champ catégorique et d'une liste de distances.
    """

    # Définition des constantes pour les paramètres et les sorties

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    FIELD = 'FIELD'
    DISTANCES = 'DISTANCES'


    def initAlgorithm(self, config):
        """
        Définition des entrées et sorties de l'algorithme.
        """

        # Paramètre : couche source de points
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input Point layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Paramètre : champ utilisé pour catégoriser les distances des tampons
        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD,
                self.tr('Field used to categorize the buffer distances'),
                parentLayerParameterName=self.INPUT
            )
        )

        # Paramètre : liste des distances des tampons (séparées par des virgules)
        self.addParameter(
            QgsProcessingParameterString(
                self.DISTANCES,
                self.tr('List of buffer distances (comma separated), e.g. 10,20,30'),
                self.tr('Vérifier combien de valeur unique dans le champ et ajouter les distances')
            )
        )

        # Paramètre : couche de sortie pour stocker les tampons générés
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output Buffer layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Exécution principale de l'algorithme.
        """
        # Définition des champs pour la couche de sortie
        my_fields = QgsFields()
        my_fields.append(QgsField('area', QVariant.Double)) # Champ pour stocker l'aire des tampons

        # Récupération des paramètres d'entrée
        source = self.parameterAsSource(parameters, self.INPUT, context) # Couche source
        category_field = self.parameterAsString(parameters, self.FIELD, context) # Champ catégorique
        distances = self.parameterAsString(parameters, self.DISTANCES, context).split(',') # Liste des distances
        
        # Création de la couche de sortie
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, my_fields, QgsWkbTypes.Polygon, source.sourceCrs())
        
        # Vérification des paramètres
        if not source or not category_field or not distances or not sink:
            raise QgsProcessingException('Invalid input parameters')
        


        # Calcul du nombre d'étapes pour la barre de progression
        total = 100.0 / source.featureCount() if source.featureCount() else 0

        buffer_features = [] # Liste pour stocker les tampons générés
        
        features = source.getFeatures() # Récupération des entités de la couche source

        # Boucle sur chaque entité de la couche source
        for current, feature in enumerate(features):
            # Arrêter l'algorithme si l'utilisateur clique sur "Annuler"
            if feedback.isCanceled():
                break
            # Récupération de la catégorie
            category = int(feature[category_field]) - 1 #ajustement pour correspondre à l'index des distances
            if category < 0 or category >= len(distances): # Vérification de la validité de la catégorie
                continue

            # Création du tampon pour la catégorie actuelle
            buffer_geom = feature.geometry().buffer(int(distances[category]), 5)
            new_feature = QgsFeature()
            new_feature.setGeometry(buffer_geom) # Définir la géométrie du tampon
            buffer_features.append(new_feature) # Ajouter le tampon à la liste
            feedback.setProgress(int(current * total)) # Mise à jour de la barre de progression

        # Fusion des tampons si des tampons ont été générés
        if buffer_features:
            merged_geom = buffer_features[0].geometry() # Géométrie fusionnée initiale
            for feat in buffer_features[1:]:
                merged_geom = merged_geom.combine(feat.geometry()) # Fusion des géométries
            merged_feature = QgsFeature()
            merged_feature.setGeometry(merged_geom) # Définir la géométrie fusionnée
            merged_feature.setAttributes([merged_geom.area()]) # Définir l'aire comme attribut
            sink.addFeature(merged_feature, QgsFeatureSink.FastInsert) # Ajouter à la couche de sortie
        
            feedback.pushInfo(f'Merged buffer area: {merged_geom.area()} m²') # Afficher l'aire fusionnée
            

        # Retourner la couche de sortie
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Cumulative Buffer Analysis'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CumulativeBufferAnalysisAlgorithm()
